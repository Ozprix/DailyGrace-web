
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Utility function ---
    function isSignedIn() {
      return request.auth != null;
    }

    // --- Global Content (Read-only for users) ---
    match /bible_verses/{verseId} {
      allow read: if true;
      allow write: if false; // Admin only

      // Reflections Subcollection
      match /reflections/{reflectionId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        // Allow users to upvote, but not change other fields
        allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid ||
                       (request.resource.data.diff(request.resource.data).affectedKeys()
                         .hasOnly(['upvotedBy', 'upvotes']));
        allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid; // Allow users to delete their own reflections
      }
    }

    match /challenges_meta/{challengeId} {
      allow read: if true;
      allow write: if false; // Admin only
    }

    match /exclusive_content_meta/{itemId} {
      allow read: if true;
      allow write: if false; // Admin only
    }
    
    match /readingPlans/{planId} {
      allow read: if true;
      allow write: if false; // Admin only
    }

    match /quizzes/{quizId} {
      allow read: if true;
      allow write: if false; // Admin only
    }

    match /quiz_categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Admin only
    }

    match /missions/{missionId} {
      allow read: if true;
      allow write: if false; // Admin only
    }
    
    // --- Public Prayer Wall ---
    match /anonymousPrayers/{prayerId} {
      allow read: if true;
      allow create: if isSignedIn();
      // Only allow incrementing the prayedForCount
      allow update: if request.resource.data.diff(request.resource.data).affectedKeys().hasOnly(['prayedForCount']);
      allow delete: if false; // Nobody can delete prayers
    }
    
    // --- Prayer Circles ---
    match /prayerCircles/{circleId} {
      allow read: if resource.data.isPrivate == false || request.auth.uid in resource.data.memberUids;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.memberUids; // Members can update (e.g., join)
      
      match /requests/{requestId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.memberUids;
        allow update: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.memberUids;
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.authorId || request.auth.uid == get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.ownerId);
      }
    }

    // --- User Data ---
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;

      // User-specific subcollections
      match /journal/{entryId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /userChallengeData/{challengeId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /achievements/{achievementId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /userMissions/{weekId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // --- User Reading Plan Progress ---
    // Note: This is a top-level collection, not a subcollection
    match /userReadingProgresses/{progressId} {
        // progressId is formatted as {userId}_{planId}
        allow read, write: if isSignedIn() && request.auth.uid == progressId.split('_')[0];
    }
    
    // --- Genkit Flows Data ---
    match /generate/{flowId} {
        allow read, write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // --- User Preferences ---
    match /user_preferences/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}
